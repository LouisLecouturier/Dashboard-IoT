import styles from "./Informations.module.scss";
import { useEffectOnce } from "usehooks-ts";

const Informations = () => {
  useEffectOnce(() => {
    window.scrollTo(0, 0);
  });

  return (
    <main>
      <h1 className="pageTitle">Informations sur le projet</h1>
      <section className={`section ${styles.section}`}>
        <h2 className="sectionTitle">Le contexte de du projet</h2>
        <p>
          Ce Dashboard a √©t√© r√©alis√© dans le cadre d‚Äôun projet en{" "}
          <strong>deuxi√®me ann√©e d'ADIMAKER ISEN</strong>. L‚Äôobjectif √©tait de
          mettre un pied dans le monde des <strong>objets connect√©s</strong> et de l'<strong>IoT</strong>.
          Nous devions r√©aliser un objet permettant d‚Äôanalyser la{" "}
          <strong>qualit√© d‚Äôune pi√®ce</strong> √† l‚Äôaide de diff√©rents{" "}
          <strong>capteurs</strong>.
        </p>
        <p>
          Pour pouvoir visualiser les donn√©es et g√©rer les diff√©rents objets,
          nous devions r√©aliser une page web synth√©tisant toutes les
          informations.
          <br />
          Je me suis occup√© de toute cette partie pendant que les autres membres
          du groupe se sont concentr√©s sur la r√©alisation de l‚Äôobjet en lui-m√™me
          et la partie serveur (sur laquelle j'ai aussi un peu aid√©).
        </p>
        <p>
          Le cahier des charges √©tait tr√®s simple, nous n‚Äôavions pas besoin de{" "}
          <strong>styliser</strong> notre interface, ni d‚Äô
          <strong>animer</strong> et rendre le tout aussi{" "}
          <strong>interactif</strong>. Mais j‚Äôai voulu aller beaucoup{" "}
          <i>(vraiment beaucoup)</i>&nbsp;&nbsp;
          <strong>plus loin que ce qui √©tait demand√©</strong> initialement üòÅ.
        </p>
      </section>
      <section className={`section ${styles.section}`}>
        <h2 className="sectionTitle">R√©alisation</h2>
        <p>
          J‚Äôai commenc√© par me faire une <strong>maquette sur Figma</strong>{" "}
          pour avoir une id√©e g√©n√©rale du style de design que je voulais cr√©er.
          Une fois ma charte graphique d√©finie, j‚Äôai commenc√© √† coder.
        </p>
        <p>
          Pour une telle application, <strong>ReactJS</strong> me paraissait
          √™tre la meilleure solution. J‚Äôai d√©compos√© l‚Äôensemble du projet en
          diff√©rents{" "}
          <strong>composants</strong>, et j'ai stylis√© le tout avec les{" "}
          <strong>SCSS modules</strong>. L‚Äôapplication √©tait li√©e √† une{" "}
          <strong>API REST</strong>
          que nous avons cr√©√© avec <strong>
            Django-Rest-Framework
          </strong> et <strong>MariaDB</strong>.{" "}
        </p>
        <p>
          Une fois le projet termin√© et pr√©sent√© √† notre jury, celui-ci √† dormi
          un petit bout de temps sur mon <strong>GitHub</strong>... Mais √©tant
          fier de mon travail, je voulais le pr√©senter dans mon{" "}
          <strong>portfolio</strong> üòâ. Il m‚Äôa donc fallu{" "}
          <strong>r√©adapter tout mon projet</strong> pour qu‚Äôil fonctionne sans
          les boites connect√©s et sans son API.
          <br />
          J‚Äôai alors d√©cid√© de migrer tout le projet sur <strong>
            ViteJS
          </strong>{" "}
          et <strong>TypeScript</strong> pour d√©couvrir Vite et profiter des
          avantages de TypeScript. Toute la logique a donc √©t√© adapt√©e pour
          fonctionner <strong>en local</strong> en{" "}
          <strong>stockant de fausses donn√©es en localStorage</strong>.
        </p>
        <p>
          {" "}
          Et nous voil√† donc <strong>aujourd‚Äôhui</strong>, un Dashboard
          totalement <strong>fonctionnel en local</strong> !
        </p>
      </section>
      <section className={`section ${styles.section}`}>
        <h2 className="sectionTitle">Axes d'am√©lioration</h2>
        <ul>
          <li>
            Rendre le projet <strong>Responsive</strong>
          </li>
          <li>
            <strong>Revoir l'architecture</strong> du projet React
          </li>
          <li>
            Ajouter des <strong>tests unitaires</strong>
          </li>
          <li>
            Cr√©er un syst√®me d'<strong>authentification</strong>
          </li>
        </ul>
      </section>
      <section className={`section ${styles.section}`}>
        <h2 className="sectionTitle">Les technologies utilis√©es</h2>
        <div className={styles.category}>
          <h3 className={styles.categoryTitle}>Dashboard</h3>
          <ul>
            <li>ReactJS</li>
            <li>ViteJS</li>
            <li>TypeScript</li>
            <li>SCSS modules</li>
            <li>pnpm</li>
          </ul>
        </div>
        <div className={styles.category}>
          <h3 className={styles.categoryTitle}>Serveur</h3>
          <ul>
            <li>Python</li>
            <li>Django</li>
            <li>Django Rest Framework</li>
            <li>MariaDB</li>
          </ul>
        </div>
        <div className={styles.category}>
          <h3 className={styles.categoryTitle}>L'objet connect√©</h3>
          <ul>
            <li>Langage C</li>
            <li>ESP32</li>
            <li>Requ√™tes MQTT</li>
            <li>Captive Portal</li>
            <li>Diff√©rents capteurs</li>
          </ul>
        </div>
        <div className={styles.category}>
          <h3 className={styles.categoryTitle}>Hosting</h3>
          <ul>
            <li>Raspberry Pi</li>
            <li>Linux Debian</li>
          </ul>
        </div>
      </section>
    </main>
  );
};

export default Informations;
